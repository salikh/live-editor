# ステップ6: シミュレーション {#ref-PJSStep6}

ゲームのなかのオブジェクトは馴染みがあると遊びやすくなります。たとえば、重力で落ちるボールはどのようにプログラムで表現するのでしょうか？それはシミュレーションを使って実装できます。ボールのシミュレーションにはボールの位置と速度が必要です。重力の場合は加速度は定数です。

```example
var y = 10;
var vy = 0;

function draw() {
  // シミュレーション
  y = y + vy;     // 縦位置
  vy = vy + 0.1;  // 加速
  // アニメーション
  background(220);
  ellipse(50, y, 30, 30);
}
```

ボールのシミュレーションに２つの変数を使います。`y`は縦位置と`vy`は縦速度を表しています。`draw()`は一秒で何回も呼ばれるので、毎回新しい位置や速度を計算します。シミュレーションの計算の後、キャンバスを書き直すことでアニメーションを実装します。この例では前と違って`float`の変数を使います。`float`は浮動小数点数といい、整数ではない数を保存できます。

以上のシミュレーションでボールが一回キャンバスの下に落ちたらキャンバスから消えます。ボールをゲームから消えさせないようにキャンバスの端からバウンドさせることできます。
プログラムの実行の世界では端というものが存在しないので、プログラムは「壁にぶつかったか」という条件を調べなければいけません。

```example
var y = 10;
var vy = 0;

function draw() {
  y = y + vy;     // 縦位置
  vy = vy + 0.1;  // 加速
  if (y > height) {  // 床に当たる条件
    y = height;
    vy = -8;
  }
  background(220);
  ellipse(50, y, 30, 30);
}
```

この例では、円が床に当たっているかどうかという条件を調べています。`y`軸は下向きなので、キャンバスの下の部分のY座標は`height`です。シミュレーションの計算の結果でボールは床下に行きそうの条件は
`y > height`で調べます。

ボールが床に当たったら、ボールに上向きの速度を与えれば、本物のボールのようにバウンドします。

**問題6:** 雪だるまを飛びさせましょう。

```hidden
// SnowmanBounce

var x = 150;
var y = height;
var vy = -2;

function draw() {
  y = y + vy;
  vy = vy + 0.1;
  if (y > height) {
    y = height;
    vy = -5;
  }
  background(220);
  ellipse(x, y-50, 100, 100);
  ellipse(x, y-130, 80, 80);
  ellipse(x, y-190, 60, 60);
}

function keyPressed() {
  if (keyCode === LEFT) {
    x = x - 5;
  }
  if (keyCode === RIGHT) {
      x = x + 5;
  }
}
```

次は[ステプ7][PJSStep7]へ。

