# Step 1.8: コードを整理しよう {#ref-WhackACircle18}

[前に戻る][WhackACircle17]

以下のコードを入力して実行してみましょう。

```example
// WhackACircle18
// 円の中心の座標
var x;
var y;

// 円の半径
var radius = 20;

// スコアを初期化
var score = 0;

// 初期化・一回だけ実行される
function setup() {
  // キャンバスの大きさを 300 × 300 にする
  size(300, 300);
  // キャンバスを白で塗ります
  background(255, 255, 255);
  // 滑らかに描く
  smooth();
  // 1 秒間、1 回描く
  frameRate(1);
}

// 座標 (x, y) に円を描く
function drawCircle(x, y) {
  // 円の中身を緑色にする
  fill(0, 255, 0);
  // 円周を赤にする
  stroke(255, 0, 0);
  // 線の太さを 2 にする
  strokeWeight(2);
  // 中心座標が (x, y)、直径が radius * 2 の円を描く
  ellipse(x, y, radius * 2, radius * 2);
}

// スコアを表示
function drawScore() {
  // 文字の色を黒にする
  fill(0, 0, 0);
  // 文字の大きさを 15 にする
  textSize(15);
  // スコアを文字にして、座標 (20, 40) に表示する
  text("スコア: " + str(score), 20, 40);
}

// ずっと実行される
function draw() {
  // キャンバスを白で塗ります
  background(255, 255, 255);
  // ランダムな座標を生成する
  x = random(0, 300);
  y = random(0, 300);
  // 中心座標が (x, y) の円を描く
  drawCircle(x, y);
  // スコアの文字を表示する
  drawScore();
}

// マウスをクリックしたら実行されるイベントハンドラ
function mouseClicked() {
  // score の値を増やす
  score = score + 1;
}
```

上記は円を描くプログラムとスコアを表示するプログラムをあわせたものです。そこにコードをまとめるために `drawCircle` と `drawScore`
というメソッドを定義しています。この 2 つのメソッドの内容を `draw` に直接書くと、長くなって分かりにくくなります。そこで
2つの別々のメソッドにまとめています。

この状態ではどこをクリックしてもスコアが増えてしまいます。次は、円をクリックした場合にだけスコアが増えるようにコードを変更してみましょう。

[Step 1.9: 円をクリックしたらスコアを増やす][WhackACircle19]

