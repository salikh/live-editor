# 5. 完成版 {#ref-LabyrinthSolver}

[前に戻る][LabyrinthBacktrace]

```example
/* @pjs preload="images/Labyrinth2a.png"; */
/* @pjs preload="images/Walker44.png"; */

var imgLabyrinth = getImage("images/Labyrinth2a.png");
var imgWalker = getImage("images/Walker44.png");

// Step in pixels.
var s = 17;
// Size of the grid.
var n = 360/s;
// The grid. 0 means the cell is blocked. >0 means the cell is open.
var grid[][];

var showMap = true;

// The starting point;
var sx = 0, sy = 0;
// The goal.
var gx = 0, gy = 0;

function CreateMap() {
    for (var i = 0; i < n; i++) {
        for (var j = 0; j < n; j++) {
            color c = get(i*s+s/2, j*s+s/2);
            if (brightness(c) > 200) {
                grid[i][j] = 999;
                if (showMap) {
                    fill(255, 255, 255);
                    rect(s*i, s*j, s/2, s/2);
                }
            }
            if (red(c) > 100 && green(c) < 100) {
                sx = i;
                sy = j;
                if (showMap) {
                    fill(200, 0, 0);
                    rect(s*i, s*j, s/2, s/2);
                }
            } else if (green(c) > 100 & red(c) < 100) {
                gx = i;
                gy = j;
                if (showMap) {
                    fill(0, 200, 0);
                    rect(s*i, s*j, s/2, s/2);
                }
            }
        }
    }
}

// Fixed queue length for simplicity. The expected maximum queue size is
// the the size of the grid, so should be well below 500.
var queueLength = 500;
var qx[] = new int[queueLength];
var qy[] = new int[queueLength];
var qhead = 0;
var qtail = 0;

function queuePush(var x, var y) {
    qx[qtail] = x;
    qy[qtail] = y;
    qtail = (qtail+1) % queueLength;
    // Note: in case of queue overflow, the queue contents will be lost
    // (misinterpreted as empty queue).
}

function queuePop() {
    if (qtail != qhead) {
        qhead = (qhead+1) % queueLength;
    }
}

var queueEmpty() {
    return qtail == qhead;
}

function visitCell(var x, var y, var distance) {
    // Out of bounds checks.
    if (x < 0 || x >= n) return;
    if (y < 0 || y >= n) return;
    // Wall check.
    if (grid[x][y] == 0) return;
    // Distance check. If we find a shorter distance,
    // record it and return true. Note that all empty cells
    // originally have 999 recorded.
    if (grid[x][y] > distance) {
        // Record the distance as shortest.
        grid[x][y] = distance;
        // Push the cell into the queue for further examination.
        queuePush(x, y);
        if (showMap) {
            fill(0, 0, 0);
            text("" + distance, x*s, y*s);
        }
    }
}

function StartSearch() {
    // Using Breadth-first search in rectangular grid.
    // Put the goal position into the queue and search back towards
    // the start position.
    queuePush(gx, gy);
    grid[gx][gy] = 1;
}

function setup() {  // this is run once.
    // canvas size (Variable aren't evaluated. Integers only, please.)
    size(360, 360);

    // Display the background (labyrinth).
    image(imgLabyrinth, 1, 1, 360, 360);

    // Allocate 2-dimensional array in 2 steps.
    grid = new boolean[n][];
    for (var i = 0; i < n; i++) {
        grid[i] = new boolean[n];
    }

    CreateMap();
    StartSearch();
}

var next = 0;
var step = 10;
bool found = false;

// The position during backtracing.
var bx, by;

function searchStep() {
    // While queue is not empty. Loop is implicit around draw().
    if (!queueEmpty()) {
        var x = qx[qhead];
        var y = qy[qhead];
        queuePop();

        fill(200, 200, 180);
        rect(s*x, s*y, s/2, s/2);
        var distance = grid[x][y];

        if (x == sx && y == sy) {
            found = true;
            fill(0,0,0);
            bx = sx;
            by = sy;
            return;
        }
        // Go and try 4 neighbors.
        visitCell(x+1, y, distance+1);
        visitCell(x-1, y, distance+1);
        visitCell(x, y-1, distance+1);
        visitCell(x, y+1, distance+1);

    } else {
        // path not found.
        noLoop();
    }
}

var backTrace(var nx, var ny, var distance) {
    if (nx < 0 || nx >= n) return false;
    if (ny < 0 || ny >= n) return false;
    if (grid[nx][ny] != distance) return false;
    // Found the backtrace step.
    if (showMap) {
        stroke(255,0,0);
        line(bx+s/4, by+s/4, nx+s/4, ny+s/4);
    }
    bx = nx;
    by = ny;
    return true;
}

function backTraceStep() {
    fill(255, 255, 100);
    rect(bx*s+s/4, by*s+s/4, s/2, s/2);
    if (bx == gx && by == gy) {
        noLoop();
    }
    var distance = grid[bx][by];
    stroke(255, 255, 0);
    if (backTrace(bx-1, by, distance-1));
    else if (backTrace(bx+1, by, distance-1));
    else if (backTrace(bx, by-1, distance-1));
    else if (backTrace(bx, by+1, distance-1));
}

function draw() {
    if (showMap) {
        while (millis() <= next) return;
        next = millis() + step;
    }

    if (found) {
        backTraceStep();
    } else {
        searchStep();
    }
}
```

