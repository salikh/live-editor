# ステップ4: マウスの使い方 {#ref-PJSStep4}

ゲームを作るにはユーザーからの入力を処理する必要があります。まずはマウスを使ってみましょう。プログラムの実行中にマウスがキャンバスの中に入ると、`mouseX`と`mouseY`の変数にマウスの位置が設定されます。

```prerender
draw = function() {
  background(255);  // 白
  ellipse(mouseX, mouseY, 10, 10);
};
```

マウスをキャンバス内で動かしてみましょう。丸がマウスについてくるのがわかるでしょう。

では、ユーザーがマウスをクリックしたらキャンバスを黒くしてみましょう。
ユーザーがマウスをクリックしたことに反応するためには、`mousePressed()`関数を定義します。この関数は、マウスのボタンが押されたときに呼ばれます。次のプログラムを実行して、マウスをキャンバス内でクリックすると、一瞬だけキャンバスが黒くなります。

```prerender
draw = function() {
  background(255);  // 白
  ellipse(mouseX, mouseY, 10, 10);
  frameRate(10);
};

mousePressed = function() {
  background(0);  // 黒
}
```

なぜキャンバスが黒のままにならないのでしょうか。それは、`draw()`関数が繰り返し実行され、`draw()`の中にキャンバスを白く塗りつぶす命令`background(255)`が入っているからです。

マウスをクリックした後、キャンバスを一瞬だけではなくずっと黒にするには、どうすればいいでしょうか。

ここでは変数が役に立ちます。ただ、前と違って、Processingの標準の変数ではなくて、自分で新しい変数を作ります。変数を作るには、`var c =
255;`のような文をプログラムに追加します。この中で`int`は変数の型を表しています：整数(integerの略)。 `=
255`は変数の値を指定しています。`c`は変数の名前です。マウスがクリックされたときに`mousePressed()`が呼ばれるので、その中で変数の値を変えることができます。
`c = 0;`は変数に新しい値(`0`)を与えます。

```prerender
var c = 255;

draw = function() {
  background(c);
  ellipse(mouseX, mouseY, 10, 10);
  frameRate(10);
};

mousePressed = function() {
  c = 0;
};
```

ここでは、プログラムの実行を始めた時に変数cが作られて、最初の値は255になっています。変数の値は255なので、`background(c);`はキャンバスを白く塗りつぶします。ユーザがマウスをクリックすると、`mousePressed()`が呼ばれて、変数cの値が0になります。その後は、`background(c);`という命令はキャンバスを黒く塗りつぶすことになります。

**問題4**: 雪だるまをマウスと一緒に動かしてみましょう。

```hidden
// SnowmanMouse
size(300, 300, "2D");

draw = function() {
  background(220);
  ellipse(mouseX, mouseY+80, 100, 100);
  ellipse(mouseX, mouseY, 80, 80);
  ellipse(mouseX, mouseY-60, 60, 60);
};
```

次は[ステップ5][PJSStep5]へ。

