# Step 1.5: 円を「動かす」 {#ref-WhackACircle15}

[前に戻る][WhackACircle14]

今までは円を一回描くだけですが、次は円を繰り返しランダムな場所に描いてみます。以下のコードを入力して実行してみましょう。

```example
// WhackACircle15
// 初期化・一回だけ実行される
function setup() {
  // キャンバスの大きさを 300 × 300 にする
  size(300, 300);
  // 滑らかに描く
  smooth();
  // 1 秒間に 30 回描く
  frameRate(30);
}

// ずっと実行される
function draw() {
  // キャンバスを白で塗る
  background(255, 255, 255);
  // 円の内部を緑色で塗る
  fill(0, 255, 0);
  // 円周を赤色で描く
  stroke(255, 0, 0);
  // 線の太さを 2 にする
  strokeWeight(2);

  // ランダムな座標を生成する
  var x = random(0, 300);
  var y = random(0, 300);

  // 中心座標が (x, y)、直径が 40 の円を描く
  ellipse(x, y, 40, 40);
}
```

実行すると、円が高速でランダムな場所で現れます。今回のプログラムには、`function draw() { ...
}` という書き方が出てきます。これらは**メソッド**と呼びます。メソッドは複数の命令をまとめて、１個の命令として使えるようにします。

Scratch では、各ブロック（例：ペンを下ろす）がメソッドだと考えても間違いではないでしょう。Processing
でメソッドを定義することは、Scratch でブロック定義を使用して他のブロックをまとめるのに似ています。次の例を見てみましょう。

![Scratch method](images/scratch_method.png)

Scratch と同様、Processing でも `size(300, 300);` などの命令がメソッドの呼び出しです。

Step 1.5 の Processing のプログラムでは、`setup` と `draw`
というメソッドを定義しています。これは特別なメソッドです。`setup` はプログラムが始まったらすぐに 1 回だけ実行されます。`draw` は
`setup` が実行されたあとに、ずっと実行されます。定義文の構成を説明します。最初の `void`
はこのメソッドを実行しても何の値も返さないという意味を宣言しています。値を返すメソッドもあり、`random` はその例の 1
つで指定された範囲からランダムな値を返します。

これから、値の返すメソッドを定義していきます。メソッド名のあとの括弧には何も入っていない `setup()`
のようなメソッドは引数を取りません。引数を取るメソッドも続きのステップで定義します。

さて、問題です。今のプログラムでは円が高速で動いています。もっとゆっくり動かすことができるでしょうか？コードとコメントを読んで、表示の頻度を 1 秒に 1
回に変えましょう。

[Step 1.6: クリックして文字を表示する][WhackACircle16]

